렌더링 프로그램을 만들 것이다. 렌더링 프로그램의 결과물은 이미지이다. 프로그램이 잘 작성됐는지 확인하려면 렌더링의 결과인 이미지 파일을 확인하면 된다.
RGB 값의 범위는 0 부터 255 사이의 정수이다. 하지만 실습에서는 범위를 0 부터 1 사이의 실수로 매핑하여 색상값을 구한 뒤
다시 0 부터 255 사이의 정수로 변환하여 출력할 것이다.
범위로 매핑하는 이유
1. 벡터 연산의 용이하게 하기 위해
2. 색상 범위의 확장성을 위해
3. 물리학적인 의미를 고려했을 때 [0, 1]로 매핑하는 것이 더 적합
사과(광원)가 빨간 색으로 보이는 이유는 빨간색으로 빛(광선)을 반사하기 때문이다. 그것을 알베도 라고 하는데 알베도는 0부터 1사이의 값을 갖는다.

우리는 오른손 좌표계를 쓸 것이다. 
우리의 오른쪽 방향이 x축, 머리 위쪽 방향이 y축, 모니터에서 나오는 방향이 z축이다.
광원으로부터 나온 모든 광선에 대해 조사할 필요가 없다. 
우리의 눈에 들어온 광선이 어떤 길을 따라 왔는지만 거꾸로 추적하면 되는 것이다.
우리는 3차원 좌표계에서 광선을 추적하며 그 색상을 확인할 것이다. 
광선도 벡터와 같이 시작 하는 점(origin)과 뻗어나가는 방향(direction)을 가지고 있다.
수식의 형태로 다시 써보면
P = 0 + d
(p는 광선, 0와 d는 각각 출발점과 벡터)
여기서 방향 벡터의 크기는 1일 수도, 그렇지 않을 수도 있다.
우리는 앞으로 방향 벡터를 1로 정규화해준 뒤 그것에 실수(t)를 곱하여 광선의 방향을 표현할 것이다.
P(t) = 0 + t * D
(D는 정규화된 방향 벡터)

3. 카메라
이제 우리는 우리 눈에 들어온 광선이 지나온 길을 따라 광선을 역으로 추적해 나갈 것이다. 어떻게 광선을 추적할 수 있을까?
바로 우리의 눈에서 광선이 나간다고 생각을 하는 것이다.
우리의 눈에서 나간 광선이 물체에 반사되고 반사된 광선이 광원에 도착한다면, 그 광선이 광원으로부터 출발해서 물체에 부딪히고
우리 눈에 들어왔다고 생각하는 것이다. 그리고 레이트레이싱에서 우리 눈의 역할을 하는 것이 바로 카메라다.
이제 카메라에서 광선이 출발한다고 생각해보자. 광선을 어느 방향으로 보내야 할까? 우리는 3차원 좌표계의 오브젝트를 2차원
평면의 픽셀을 통해 확인할 것이다. 이 때 3차원 장면을 2차원에 투사하기 위해 사용되는 2차원 직사각형을 뷰 포트라고 한다.
뷰 포트의 왼쪽 맨 위에 있는 픽셀부터 순서대로 광선을 보낼 것이다. 픽셀의 개수는 canvas의 width와 height의 곱으로 결정된다.

4. 구
원의 중심을 C, 원 위의 한 점을 P라고 하면
원의 방정식은 CP벡터 = r 이 된다.
위 식을 우리가 다루기 편하게 양변을 제곱하고 CP벡터의 제곱은 내적으로 표현할 수 있다.
내적 공식을 이용해서
(P벡터 - C벡터) * (P벡터 - C벡터) = r제곱으로 표현할 수 있다.
구의 방정식에 광선의 방정식을 대입하면
(P(t) - C) * (P(t) - C) = r제곱 이 되고 위 식을 전개하면 이차방정식이 된다.
이차 방정식의 근의 공식을 이용하여서 
b제곱 - 4ac 가 
0 보다 크면 근이 2개
0과 같다면 근이 1개
0보다 작다면 광선이 구를 통과하지 않은 것이다.

5. 법선
법선은 물체 표면과 빛의 상호작용을 계산하는데 필수적이다. 이번 장에서는 법선에 대해 알아보자.
이번 장에서는 근의 공식을 이용하여 t값을 구하고, 구와 primary ray의 정확한 교점을 구할 것이다.
구와 광선의 교점, 구의 중심을 알게 됐으니 법선은 쉽게 구할 수 있다.
교점에서 중심을 빼준 뒤 구의 반지름으로 나눠주면 정규화된 법선을 구할 수 있다.
P(교점) - C(중심) : 법선 벡터
반지름이 r이라면
1/r(P - C) : 정규화된 법선 벡터 (정규화된 법선 벡터란 단위 벡터처럼 크기를 1로 바꾼 법선 벡터라고 생각하면 됨)

6.phong lighting

3차원 공간에 광원을 놓고, 광원으로부터 나온 빛이 오브젝트에 미치는 영향을 계산할 것이다.
광원 하나에서 백색광이 나온다고 생각해보자. 백색광을 [1, 0]으로 매핑된 RGB로 표현한다면 (1, 1, 1)이 될 것이다.
광원으로부터 출발한 백색광이 반사율 (0.7, 0, 0)인 구에 반사되어 우리 눈에 들어온다면 G와 B에 해당하는 1은
구에 흡수될 것이고 R에 해당하는 1 중 70퍼센트만 반사되어 우리 눈에 들어올 것이다.
오브젝트에 영향을 미치는 요소
1. 광원의 개수
2. 광원과 오브젝트 사이의 거리
3. 물체의 표면이 어떤 재질
4. 정반사, 난반사
5. 다른 물체에 반사되어 돌아온 빛
6. 대기 중의 입자에 의해 산란되어 들어온 빛
7.투명한 물체에 의해 굴절되어 들어온 빛
이렇게 모든 요소를 고려하기 위해서는 빛의 물리학을 자세히 알아야 한다.
그러나 우리는 렌더링을 처음 접하기 때문에 레이트레이싱이 아닌 퐁 조명 모델을 사용한다.

퐁 조명 모델이란?
퐁 조멸 모델도 광선을 추적하지만 딱 한 단계, 광원에서 빛이 나와서 물체에 반사되어 눈에 들어오는 단계만 수학적으로
계산한다.
퐁 조명 모델에 사용되는 중요한 물리학적 기법은 퐁 반사 모델이다. 퐁 반사 모델은 광원에서 나온 빛이 물체에 반사되어
나올 때, 그 조도가 어느 정도가 되는지를 구하는 데에 활용되는 모델이다.
퐁 반사 모델은 조도를 구할 때 세 가지 요소를 고려한다.
1. ambient lighting(주변 조명)
밝은 낮 어두운 그늘에 들어가도 물체가 보이는 것처럼, 
공기 중에 산란되어 존재하는 빛으로 인해 물체가 밝아지는 것을 묘사함
2.diffuse lighting(확산 조명)
난반사의 역할. 광선이 물체에 비스듬하게 들어올수록 단위 면적 당 들어오는 광선의 수가 적다는 논리
3.specular lighting(반사광)
정반사

diffuse lighting
빛을 마주보는 부분은 밝게, 그렇지 않은 부분은 어둡게 표현해주는 요소가 diffuse lighting이다.
diffuse lighting은 교점에서 출발하여 광원의 중심으로 향하는 벡터(light_dir)와 교점에서의 법선의 각도를 통해 계산한다.
빛이 물체 표면에 비스듬하게 들어올수록 더 넓은 양의 면적을 비추게 되는데
빛이 표면과 평행하다면 빛은 표면을 비출수 없게 된다.
두 벡터 사이의 각도는 벡터의 내적을 통해 알 수 있다.
사이각이 0~90도 일 때, cos(사이각) 값은 1 ~ 0이므로, diffuse의 강도 계수인 kd를 cos(사이각)으로 한다.
이렇게 구한 diffuse의 강도와 빛의 양을 곱해주면, 교점에 도달한 빛의 양을 계산할 수 있다.

specular lighting
specular lighting은 정반사를 통해 들어오는 빛을 나타내는 요소이며 물체의 반짝이는 하이라이팅을 표현한다.
specular의 값은 교점에서 카메라 원점을 향하는 벡터인 view_dir과 light_dir을 법선을 기준으로 대칭시킨
reflect_dir의 사이각의 크기에 따른 코사인 값, 물체의 반짝거리는 정도를 나타내는 값인 shininess value,
0~1 사이의 임의의 값으로 설정하는 specular 강도의 연산을 통해 결정된다.

view_dir와 reflect_dir이 완전히 일치할 때 (사이각 0도)가 정반사를 통해 카메라에 도달한 빛의 양이 가장 많을 것이고,
사이각이 커질 수록 정반사를 통해 카메라에 도달한 빛의 양은 줄어들 것이다. diffuse에서와 마찬가지로
view_dir과 reflect_dir의 내적을 통해 cos값을 구한다.
물체의 반짝거리는 정도를 표현하는 ksn값은 앞서 계산한 spec에 지수로서 계산 된다. spec의 값은 [0 ~ 1]사이의 실수 이므로
ksn값이 커질 수록 물체의 하이라이팅 범위가 줄어든다.
마지막으로 specular의 강도 계수인 ks를 식에 곱해주면 specular 값을 얻게 된다.
반사광 벡터를 구하기 위해 reflect함수도 필요하다.